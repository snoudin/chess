#include "tests.h"
#include "fstream"

std::string path_to_tests = "tests/";

TEST_F(BoardTestCase, test1) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test1.txt");
    for (int i = 0; i < 8; ++i) { 
        ASSERT_EQ("1", process_query(position_count, game, cin));
    }
}

void usual_move(std::unordered_map<size_t, size_t>& position_count, Board& game, std::ifstream& cin) {
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
}

TEST_F(BoardTestCase, test2) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test2.txt");
    usual_move(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, test3) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test3.txt");
    usual_move(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, test4) {
    Board game;
    std::ifstream cin(path_to_tests + "test4.txt");
    std::unordered_map<size_t, size_t> position_count;
    process_query(position_count, game, cin);
    process_query(position_count, game, cin);
    process_query(position_count, game, cin);
    process_query(position_count, game, cin);
    process_query(position_count, game, cin);
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin)); // pawn taken en-passant does not exist
}

TEST_F(BoardTestCase, test_capture_promotion) {
    Board game;
    std::ifstream cin(path_to_tests + "test5.txt");
    std::unordered_map<size_t, size_t> position_count;
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 5", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 2", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0 0", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, test_castle) {
    Board game;
    std::ifstream cin(path_to_tests + "test6.txt");
    std::unordered_map<size_t, size_t> position_count;
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("7 0 5 0", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, another_promotion_test) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test7.txt");
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 6", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
}


TEST_F(BoardTestCase, test8) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test8.txt");
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 5", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, test9) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test9.txt");
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("7 0 5 0", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("7 7 5 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 0", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
}


TEST_F(BoardTestCase, test10) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test10.txt");
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0 0 3 0", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0 7 3 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
}

void debug_out_board(Board& game) {
    for (value_type j = 7; j > -1; --j) {
        for (value_type i = 0; i < 8; ++i) {
            auto ptr = game.start.used[i][j];
            if (!game.start.used[i][j]) std::cout << ".";
            else if (ptr->getName() == "K") std::cout << "N";
            else std::cout << ptr->getName()[0];
        }
        std::cout << "\n";
    }
    std::cout << "\n\n";
}

TEST_F(BoardTestCase, some_big_test) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    std::ifstream cin(path_to_tests + "test11.txt");
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 1", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 6", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 6", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("3 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("2 5", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 7", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0 6", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1 6", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("4 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 2", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("6 4", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("7 3", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("5 2", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    //debug_out_board(game);
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
}

TEST_F(BoardTestCase, test12) {
    Board game;
    std::unordered_map<size_t, size_t> position_count;
    position_count[game.get_hash(20)] = 1;
    std::ifstream cin(path_to_tests + "test12.txt");
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("none", process_query(position_count, game, cin));
    ASSERT_EQ("1", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("0", process_query(position_count, game, cin));
    ASSERT_EQ("none", process_query(position_count, game, cin));
    process_query(position_count, game, cin);
    ASSERT_EQ("0", process_query(position_count, game, cin));
}
